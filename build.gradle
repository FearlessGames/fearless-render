apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.6
version = '0.1-SNAPSHOT'
description = """\
Fearless-render is a simple java 3d engine built on top of the LWJGL framework
------------------------------------------------------------------------------
Project version: ${version}
Gradle version: ${gradle.gradleVersion}
------------------------------------------------------------------------------
"""

libDir = new File("lib")

repositories {
	flatDir name: 'projectLibs', dirs: libDir
	mavenCentral()
}

dependencies {
	compile group: 'org.apache', name: 'commons-math', version: '2.2'
	compile group: 'se.fearlessgames', name: 'fearless-commons', version: '0.1'
	compile group: 'com.google.guava', name: 'guava', version: '11.0'
	compile group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: '2.8.2'
	compile group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version: '2.8.2'
	testCompile group: 'junit', name: 'junit', version: '4.10'
	testCompile group: 'se.mockachino', name: 'mockachino', version: '0.6.0'

}

['windows', 'linux', 'osx'].each { platform ->
	task "${platform}Natives" {
		outputDir = "$buildDir/natives/$platform"
		inputs.files(configurations.compile)
		outputs.dir(outputDir)
		doLast {
			copy {
				def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts
						.findAll { it.classifier == "natives-$platform" }
				artifacts.each {
					from zipTree(it.file)
				}
				into outputDir
			}
		}
	}
}

task nativeLibs(dependsOn: ['windowsNatives', 'linuxNatives', 'osxNatives'])<< {
}


task(runExample, dependsOn: ['build', 'nativeLibs']) << {
	String nativeDir;
	def osName = System.getProperty('os.name').toLowerCase()
	if (osName.contains('windows'))
		nativeDir = 'windows'
	else if(osName.contains('linux'))
		nativeDir = 'linux'
	else if(osName.contains('mac os'))
		nativeDir = 'osx'
	else
		throw new Exception('Unknown OS')

	def libpath = "-Djava.library.path=$buildDir/natives/$nativeDir"
	def argsList = [libpath]
	println(argsList)
	javaexec {
		main =  'se.fearlessgames.fear.example.Main'
		classpath = sourceSets.main.runtimeClasspath
		jvmArgs =  argsList
	}
}