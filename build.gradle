apply plugin: 'java'
apply plugin: 'code-quality'

sourceCompatibility = 1.6
version = '0.1-SNAPSHOT'
description = """\
Fearless-render is a simple java 3d engine built on top of the LWJGL framework
------------------------------------------------------------------------------
Project version: ${version}
Gradle version: ${gradle.gradleVersion}
------------------------------------------------------------------------------
"""

libDir = new File("lib")

repositories {
    flatDir name: 'projectLibs', dirs: libDir
    mavenCentral()
}

lwjglVersion = '2.8.3'

dependencies {
    compile group: 'org.apache', name: 'commons-math', version: '2.2'
    compile group: 'se.fearlessgames', name: 'fearless-commons', version: '0.1'
    compile group: 'com.google.guava', name: 'guava', version: '11.0.1'
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: lwjglVersion
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version: lwjglVersion
    compile group: 'org.newdawn.slick', name: 'slick-util', version: '0.1'
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'se.mockachino', name: 'mockachino', version: '0.6.0'
}

test {
    maxParallelForks = 10
}

[checkstyleMain, checkstyleTest]*.ignoreFailures = true

['windows', 'linux', 'osx'].each { platform ->
    task "${platform}Natives" {
        outputDir = "$buildDir/natives/$platform"
        inputs.files(configurations.compile)
        outputs.dir(outputDir)
        doLast {
            copy {
                def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts.findAll { it.classifier == "natives-$platform" }
                artifacts.each {
                    from zipTree(it.file)
                }
                into outputDir
            }
        }
    }
}

task nativeLibs(dependsOn: ['windowsNatives', 'linuxNatives', 'osxNatives']) << {
}


task(runExample, dependsOn: ['build', 'nativeLibs']) << {
    String nativeDir;
    def osName = System.getProperty('os.name').toLowerCase()
    if (osName.contains('windows'))
        nativeDir = 'windows'
    else if (osName.contains('linux'))
        nativeDir = 'linux'
    else if (osName.contains('mac os'))
        nativeDir = 'osx'
    else
        throw new Exception('Unknown OS')

    def libpath = "-Djava.library.path=$buildDir/natives/$nativeDir"
    def argsList = [libpath]
    println(argsList)
    javaexec {
        main = "se.fearlessgames.fear.example.$ex"
        classpath = sourceSets.main.runtimeClasspath
        jvmArgs = argsList
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-7'
}

task(checkstyleReport, dependsOn: checkstyleMain) << {
    ant.xslt(in: "$buildDir/checkstyle/main.xml",
            style: "config/checkstyle/report-page.xsl",
            out: "$buildDir/checkstyle/checkstyle.html"
    ) {
// to pass parameters to the xsl
        //param(name:"project.name",expression:"$parent.name/$project.name")
    }
}

// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task checkLibVersions << {
    def checked = [:]
    allprojects {
        configurations.each { configuration ->
            configuration.allDependencies.each { dependency ->
                def version = dependency.version
                if (!version.contains('SNAPSHOT') && !checked[dependency]) {
                    def group = dependency.group
                    def path = group.replace('.', '/')
                    def name = dependency.name
                    def url = "http://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                    try {
                        def metadata = new XmlSlurper().parseText(url.toURL().text)
                        def newestVersion = metadata.versioning.latest
                        //println "Latest version of $name is $newestVersion"

                        if (!version.toString().equals(newestVersion.toString())) {
                            println "$group:$name $version -> $newestVersion"
                        }
                    } catch (FileNotFoundException e) {
                        logger.debug "Unable to download $url: $e.message"
                    } catch (org.xml.sax.SAXParseException e) {
                        logger.debug "Unable to parse $url: $e.message"
                    }
                    checked[dependency] = true
                }
            }
        }
    }
}


final def LIBRARIES_ID = 'Fearless-renderer Libraries'
final def TEST_LIBRARIES_ID = 'Fearless-renderer Test Libraries'
final def IML_FILE = "fearless-render.iml"


task intellijSync << {
    description = 'Add gradle dependecies to IntelliJ project library'

    final def librariesDir = new File(".idea${File.separator}libraries")
    librariesDir.mkdirs()


    final def userHome = System.getProperty('user.home').replaceAll("\\\\", "/")
    final def projectDir = file('.').path.replaceAll("\\\\", "/").toString()

    println "Using projectDir = '$projectDir'"
    println "Using user.home = '$userHome'"

    def replacePath = { path ->
        path = path.replaceAll("\\\\", "/")
        path = path.replaceAll(projectDir, "\\\$PROJECT_DIR\\\$")
        path = path.replaceAll(userHome, "\\\$USER_HOME\\\$")
        return path;
    }

    def makeJarList = { path ->
        path.split(File.pathSeparator).collect {
            replacePath(it);
        }
    }

    final def compileJars = makeJarList(configurations.compile.asPath)
    final def testJars = makeJarList(configurations.testCompile.asPath) - compileJars

    def createLibrary = { fileName, libraryName, jars ->
        final def gradleLibXml = new File(librariesDir, fileName)
        gradleLibXml.write """
<component name="libraryTable">
  <library name="$libraryName"/>
</component>"""
        final def xmlRoot = new XmlParser().parse(gradleLibXml)
        final def classesNode = xmlRoot.library[0].appendNode('CLASSES')
        final def sourceNode = xmlRoot.library[0].appendNode('SOURCES')

        jars.each { jar ->
            classesNode.appendNode('root', [url: "jar://$jar!/"])
            def src = jar.replaceAll("/jar/", "/source/").replaceAll(".jar", "-sources.jar")
            sourceNode.appendNode('root', [url: "jar://$src!/"])
        }

        def writer = new StringWriter()
        new XmlNodePrinter(new PrintWriter(writer)).print(xmlRoot)
        gradleLibXml.write writer.toString()
        println "File '${gradleLibXml.path}' updated"
    }

    createLibrary LIBRARIES_ID.replaceAll(" ", "_").replaceAll("-", "_") + ".xml", LIBRARIES_ID, compileJars
    createLibrary TEST_LIBRARIES_ID.replaceAll(" ", "_").replaceAll("-", "_") + ".xml", TEST_LIBRARIES_ID, testJars
}

task intellijModuleSync(dependsOn: intellijSync) << {
    final def moduleFile = new File(IML_FILE)
    def root = new XmlParser().parse(moduleFile)
    def newModuleRootManager = root.component.find {it.'@name' == 'NewModuleRootManager'}

    def addEntry = { scope, entryName ->
        def orderEntry = newModuleRootManager.orderEntry.find {
            it.'@type' == 'library' && it.'@name' == entryName
        }
        if (orderEntry) {
            newModuleRootManager.remove(orderEntry)
        }

        newModuleRootManager.appendNode('orderEntry', [type: 'library', scope: scope, name: entryName, level: 'project'])
    }

    addEntry("", LIBRARIES_ID)
    addEntry("TEST", TEST_LIBRARIES_ID)



    def writer = new StringWriter()
    new XmlNodePrinter(new PrintWriter(writer)).print(root)
    moduleFile.write writer.toString()
    println "File '${moduleFile.path}' updated"
}